{
	"info": {
		"_postman_id": "0bde93db-1865-43d3-b53e-c780da3ddb8a",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18541382"
	},
	"item": [
		{
			"name": "Request_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"})\r",
							"// 3. Проверить, что в body приходит правильный string\r",
							"pm.test(\"Body matches string\", function () \r",
							"{\r",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"})\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json ();\r",
							"let cor_name = jsonData.name;\r",
							"let cor_age = jsonData.age;\r",
							"let cor_salary = jsonData.salary;\r",
							"let family = jsonData.family;\r",
							"let salary_4 = jsonData.family.u_salary_1_5_year;\r",
							"// 7. Спарсить request\r",
							"let req = request.data;\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"let req_salary_1_5 = req.salary * 4;\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками)\r",
							"pm.test(\"correct name\", function () {\r",
							"    pm.expect(cor_name).to.eql(\"Nata\")\r",
							"}) \r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"correct age\", function () {\r",
							"    pm.expect(cor_age).to.eql(\"27\")\r",
							"}) \r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"correct salary\", function () {\r",
							"    pm.expect(cor_salary).to.eql(1000)\r",
							"}) \r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"correct name_request\", function () {\r",
							"    pm.expect(cor_name).to.eql(req_name)\r",
							"}) \r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"correct age_request\", function () {\r",
							"    pm.expect (cor_age).to.eql(req_age)\r",
							"})\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"correct salary_request\", function () {\r",
							"    pm.expect (cor_salary).to.eql(Number(req_salary))\r",
							"}) \r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log (\"response_family - \", family )\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"correct salary_1_5_year_request\", function () {\r",
							"    pm.expect (salary_4).to.eql(req_salary_1_5)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nata",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"})\r",
							"// 3. Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let resp_age = jsonData.age;\r",
							"let resp_salary = String (jsonData.salary);\r",
							"let resp_family = jsonData.family;\r",
							"let resp_dog = jsonData.family.pets.dog;\r",
							"let resp_name_dog = jsonData.family.pets.dog.name;\r",
							"let resp_age_dog = jsonData.family.pets.dog.age;\r",
							"// 4. Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary;\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Cor_Name\", function (){\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"})\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Cor_Age\", function (){\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"})\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Cor_Salary\", function (){\r",
							"    pm.expect(resp_salary).to.eql(req_salary)\r",
							"});\r",
							"// 8.Вывести в консоль параметр family из response.\r",
							"console.log (\"response_family - \", resp_family )\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog_Name\", function (){\r",
							"    pm.expect(resp_dog).to.have.property(\"name\")\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog_age\", function (){\r",
							"    pm.expect(JSON.stringify(resp_dog)).to.include(\"age\")\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name_lucky\", function (){\r",
							"    pm.expect(resp_name_dog).to.eql(\"Luky\")\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Cor_Dog's_Age\", function (){\r",
							"    pm.expect(resp_age_dog).to.eql(4)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=nata&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "nata"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"}) \r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name\r",
							"let resp_age = String(jsonData.age)\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary \r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Cor_Name\", function (){\r",
							"    pm.expect(resp_name).to.eql(req_name)\r",
							"}) \r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Cor_Age\", function (){\r",
							"    pm.expect(resp_age).to.eql(req_age)\r",
							"})\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log (\"request_salary -\", req_salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log (\"response_salary -\", resp_salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (\"response_salary 0 -\", (resp_salary[0]))\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"response_salary 1 -\", (resp_salary[1]))\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"response_salary 2 -\", (resp_salary[2]))\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Cor_Salary_0\", function (){\r",
							"    pm.expect(String(resp_salary[0])).to.eql(req_salary)\r",
							"}) \r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Cor_Salary_1\", function (){\r",
							"    pm.expect(Number (resp_salary[1])).to.eql(req_salary*2)\r",
							"})\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Cor_Salary_2\", function (){\r",
							"    pm.expect(Number(resp_salary[2])).to.eql(req_salary*3)\r",
							"}) \r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", req.name)\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", req.age)\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", req.salary)\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"nata\") \r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 27)\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1000\") \r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"resp_salary.forEach((item)=> {console.log(item)})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=nata&age=27&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "nata"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"pm.environment.get(\"salary\")\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"pm.environment.get(\"age\")\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"pm.environment.get(\"nata\")\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status (200);\r",
							"}) \r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json ()\r",
							"// 7. Спарсить request.\r",
							"let req = request.data\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_1\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"start_qa_salary\")\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_2\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_6_months\")\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_3\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_12_months\")\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_4\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_5\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"qa_salary_after_3.5_year\")\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_6\", function (){\r",
							"    pm.expect(JSON.stringify(jsonData)).to.include(\"person\")\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_7_salary\", function (){\r",
							"    pm.expect(String(jsonData.start_qa_salary)).to.eql(req.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_8_salary_after_6_months\", function (){\r",
							"    pm.expect(Number(jsonData.qa_salary_after_6_months)).to.eql(req.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check_9_salary_after_12_months\", function (){\r",
							"    pm.expect(Number(jsonData.qa_salary_after_12_months)).to.eql(req.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check_10_salary_after_1.5_year\", function (){\r",
							"    pm.expect (jsonData['qa_salary_after_1.5_year']).to.eql(req.salary*3.3)\r",
							"}); \r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check_11_salary_after_3.5_year\", function (){\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary*3.8)\r",
							"}); \r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_12_u_name_person\", function (){\r",
							"    pm.expect(String(jsonData.person.u_name[1])).to.eql(req.salary)\r",
							"}); \r",
							"// 20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check_13_u_age_age\", function (){\r",
							"    pm.expect(String(jsonData.person.u_age)).to.eql(req.age)\r",
							"}); \r",
							"// 21.Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check_14_salary_after_5_year\", function (){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2)\r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2?name=nata&age=age&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "nata"
						},
						{
							"key": "age",
							"value": "age"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		}
	]
}